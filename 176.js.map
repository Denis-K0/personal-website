{"version":3,"file":"176.js","mappings":"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","sources":["webpack://portfolio-page/./src/js/chess/gameLogic/pieces.js","webpack://portfolio-page/./src/js/chess/popUp.js","webpack://portfolio-page/./src/js/chess/gameLogic/pieceMove.js","webpack://portfolio-page/./src/js/chess/ai.js","webpack://portfolio-page/./src/js/chess/gameStatus.js"],"sourcesContent":["\"use strict\"\n\nimport { coreData } from \"../gameStatus\";\n\n\n// Obj. that serve as a Output for each Piece\nexport const showPieceMovements =  {\n    pawn(enemyColor, piecePosition, board, pieceColor) {\n        let possibleMoves = [];\n        possibleMoves.push(...moves.getPawnMoves(enemyColor, piecePosition, board, pieceColor));\n        return { possibleMoves };\n    },\n    tower(enemyColor, piecePosition, board, pieceColor, pieceId, check) {\n        let possibleMoves = [];\n        possibleMoves.push(...moves.getTowerMoves(enemyColor, piecePosition, board, pieceColor));\n        possibleMoves.push(...moves.getRochadMoves(enemyColor, piecePosition, board, pieceColor, pieceId));\n        return { possibleMoves };\n    },\n    knight(enemyColor, piecePosition, board, pieceColor) {\n        let possibleMoves = [];\n        possibleMoves.push(...moves.getKnightMoves(enemyColor, piecePosition, board, pieceColor));\n        return { possibleMoves };\n    },\n    bishop(enemyColor, piecePosition, board, pieceColor) {\n        let possibleMoves = [];\n        possibleMoves.push(...moves.getBishopMoves(enemyColor, piecePosition, board, pieceColor));\n        return { possibleMoves };\n    },\n    queen(enemyColor, piecePosition, board, pieceColor) {\n        let possibleMoves = [];\n        possibleMoves.push(...moves.getTowerMoves(enemyColor, piecePosition, board, pieceColor));\n        possibleMoves.push(...moves.getBishopMoves(enemyColor, piecePosition, board, pieceColor));\n        return { possibleMoves };\n    },\n    king(enemyColor, piecePosition, board, pieceColor) {\n        let possibleMoves = [];\n        possibleMoves.push(...moves.getKingMoves(enemyColor, piecePosition, board, pieceColor));\n        return { possibleMoves };\n    },\n};\n\nconst moves = {\n    getPawnMoves(enemyColor, piecePosition, board, pieceColor) {\n        const direction = (pieceColor === 'White') ? -1 : 1;\n        const [row, col] = piecePosition;\n        let movePoints = [];\n    \n        function getMoves() {\n            // Single-Step\n            if (row + direction < 0 || row + direction > 7 || col < 0 || col > 7) return; // Control first the board border\n            if(board[row + direction][col] === '') {\n                movePoints.push([row + direction, col]);\n            } else return;\n    \n            // Double-Step\n            if (row + (direction * 2) < 0 || row + (direction * 2) > 7 || col < 0 || col > 7) return;\n            if(board[row + (direction * 2)][ col] !== '') return;\n            if ((pieceColor === 'White' && row === 6) || (pieceColor === 'Black' && row === 1)) {\n                    movePoints.push([row + (direction * 2), col]);\n                };\n        };\n    \n        function getAttacks() {\n            // Left-Attack\n            if (row + direction >= 0 && row + direction <= 7 && col - 1 >= 0 && (col - 1) <= 7) {\n                if(board[row + direction][col - 1] !== '') {\n                    if(board[row + direction][col - 1].includes(enemyColor)) {\n                        movePoints.push([row + direction, col - 1]);\n                    };\n                };\n            };\n    \n            // Right-Attack\n            if (row + direction >= 0 && row + direction <= 7 && (col + 1) >= 0 && (col + 1) <= 7){\n                if(board[row + direction][col + 1] !== '') {\n                    if(board[row + direction][col + 1].includes(enemyColor)) {\n                        movePoints.push([row + direction, col + 1]);\n                    };\n                };\n            };\n        };\n    \n        getMoves();\n        getAttacks();\n    \n        return movePoints;\n    },\n\n    getTowerMoves(enemyColor, piecePosition, board) {\n        const [row, col] = piecePosition;\n        let movePoints = [];\n    \n        // Movement-Forward\n        for(let i = row + 1; i < 8; i++) {\n            if(board[i][col] !== '') {\n                if(board[i][col].includes(enemyColor)) {\n                    movePoints.push([i, col]);\n                };\n                break;\n            };\n            movePoints.push([i, col]);\n        };\n    \n        // Movement-Backwards\n        for(let i = row - 1; i >= 0; i--) {\n            if(board[i][col] !== '') {\n                if(board[i][col].includes(enemyColor)) {\n                    movePoints.push([i, col]);\n                };\n                break;\n            };\n            movePoints.push([i, col]);\n        };\n    \n        // Movement-Right\n        for(let i = col + 1; i < 8; i++) {\n            if(board[row][i] !== '') {\n                if(board[row][i].includes(enemyColor)) {\n                    movePoints.push([row, i]);\n                };\n                break;\n            };\n            movePoints.push([row, i]);\n        };\n    \n        // Movement-Left\n        for(let i = col - 1; i >= 0; i--) {\n            if(board[row][i] !== '') {\n                if(board[row][i].includes(enemyColor)) {\n                    movePoints.push([row, i]);\n                };\n                break;\n            };\n            movePoints.push([row, i]);\n        };\n    \n        return movePoints;\n    },\n    \n    getRochadMoves(enemyColor, piecePosition, board, pieceColor, pieceId) {\n        let [row, col] = piecePosition;\n        let movePoints = [];\n    \n        function checkTowerConditions() {\n            if(pieceId === 'tower01Black' && piecePosition.toString() === '0,0') return true;\n            if(pieceId === 'tower02Black' && piecePosition.toString() === '0,7') return true;\n            if(pieceId === 'tower01White' && piecePosition.toString() === '7,0') return true;\n            if(pieceId === 'tower02White' && piecePosition.toString() === '7,7') return true;\n            return false;\n        };\n    \n        function checkKingConditions() {\n            if(pieceColor === 'White' && board[7][4] === 'king01White') return true;\n            if(pieceColor === 'Black' && board[0][4] === 'king01Black') return true;\n            return false;\n        };\n    \n        if (!checkTowerConditions() || !checkKingConditions() || coreData[pieceColor].check) return movePoints;\n    \n        row = (pieceColor === 'White') ? 7 : 0;\n\n        // Rochade to the Right\n        if(pieceId.includes('01')) {\n            for(let i = col + 1; i <= 4; i++) {\n                if(board[row][i] !== '') {\n                    if(board[row][i].includes('king') && board[row][i].includes(pieceColor)) {\n                        // console.log('Rochade accepted');\n                        movePoints.push([row, i]);\n                    } else break;\n                };\n            };\n        };\n\n        // Rochade to the Left\n        if(pieceId.includes('02')) {\n            for(let i = col - 1; i >= 4; i--) {\n                if(board[row][i] !== '') {\n                    if(board[row][i].includes('king') && board[row][i].includes(pieceColor)) {\n                        // console.log('Rochade accepted');\n                        movePoints.push([row, i]);\n                    } else break;\n                };\n            };\n        };\n\n        return movePoints;\n    },\n    \n    getKnightMoves(enemyColor, piecePosition, board) {\n        const [row, col] = piecePosition;\n        let movePoints = [];\n    \n        const directions =  [[2, 1], [2, -1], [1, 2], [-1, 2],\n                            [-2, 1], [-2, -1], [1, -2], [-1, -2],\n        ];\n    \n        directions.forEach(([rowIncrement, colIncrement]) => {\n            const newRow = rowIncrement + row;\n            const newCol = colIncrement + col;\n    \n            if (newRow < 0 || newRow > 7 || newCol < 0 || newCol > 7) return;\n    \n            if(board[newRow][newCol] === '') \n                return movePoints.push([newRow, newCol]);\n            if(board[newRow][newCol].includes(enemyColor)) \n                return movePoints.push([newRow, newCol]);\n        });\n    \n        return movePoints;\n    },\n    \n    getBishopMoves(enemyColor, piecePosition, board) {\n        const [row, col] = piecePosition;\n        let movePoints = [];\n    \n        // Movement-TopRight\n        for(let i = row + 1, j = col + 1; i < 8 && j < 8; i++, j++) {\n            if(board[i][j] !== '') {\n                if(board[i][j].includes(enemyColor)) {\n                    movePoints.push([i, j]);\n                };\n                break;\n            };\n            movePoints.push([i, j]);\n        };\n    \n        // Movement-TopLeft\n        for(let i = row + 1, j = col - 1; i < 8 && j >= 0; i++, j--) {\n            if(board[i][j] !== '') {\n                if(board[i][j].includes(enemyColor)) {\n                    movePoints.push([i, j]);\n                };\n                break;\n            };\n            movePoints.push([i, j]);\n        };\n    \n        // Movement-DownLeft\n        for(let i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--) {\n            if(board[i][j] !== '') {\n                if(board[i][j].includes(enemyColor)) {\n                    movePoints.push([i, j]);\n                };\n                break;\n            };\n            movePoints.push([i, j]);\n        };\n    \n        // Movement-DownRight\n        for(let i = row - 1, j = col + 1; i >= 0 && j < 8; i--, j++) {\n            if(board[i][j] !== '') {\n                if(board[i][j].includes(enemyColor)) {\n                    movePoints.push([i, j]);\n                };\n                break;\n            };\n            movePoints.push([i, j]);\n        };\n    \n        return movePoints;\n    },\n    \n    getKingMoves(enemyColor, piecePosition, board,) {\n        const [row, col] = piecePosition;\n        let movePoints = [];\n        const directions = [[1, 0], [1, 1], [0, 1],\n                            [-1, 1], /* King */ [-1, 0], \n                            [-1, -1], [0, -1], [1, -1],\n        ];\n    \n        directions.forEach(([rowIncrement, colIncrement]) => {\n            const newRow = rowIncrement + row;\n            const newCol = colIncrement + col;\n            \n            if (newRow < 0 || newRow > 7 || newCol < 0 || newCol > 7) return;\n    \n            if(board[newRow][newCol] === '') \n                return movePoints.push([newRow, newCol]);\n            if(board[newRow][newCol].includes(enemyColor)) \n                return movePoints.push([newRow, newCol]);\n        });\n    \n        return movePoints;\n    },\n};","\"use strict\"\n\nconst PopUp = {\n    get popUp() {\n        return document.getElementById('chessPopUp');\n    },\n    changeMsg(msg) {\n        this.popUp.innerText = msg;\n        this.showAndHide();\n    },\n    showAndHide() {\n        if  (this.popUp.classList.contains('show') &&\n            !this.popUp.innerText.includes('Congratulation')) return;\n\n        if (this.popUp.innerText.includes('Congratulation')) {\n            this.popUp.classList.add('showWin');\n            setTimeout(function() {\n                PopUp.popUp?.classList?.remove('showWin');\n            }, 5050);\n        } else {\n            this.popUp.classList.add('show');\n            setTimeout(function() {\n                PopUp.popUp?.classList?.remove('show');\n            }, 1250);\n        }\n    }\n};\n\nexport { PopUp }","import { coreData, gameStatus } from \"../gameStatus\";\nimport { showPieceMovements } from \"./pieces\";\nimport { PopUp } from \"../popUp.js\";\n\n\"use strict\";\n\n// Handle the Events\nexport const selectors = {\n    get htmlBoard() {\n        return document.querySelectorAll('.fieldCluster');\n    },\n    addEventsToBoard() {\n        selectors.htmlBoard.forEach((cluster) => {\n            cluster.addEventListener('click', selectPieceFunctions.selectPiece);\n            cluster.addEventListener('keydown', KeyDown.handleKeyDownSelectPiece);\n        })\n    },\n    removeEventsFromBoard() {\n        selectors.htmlBoard.forEach((cluster) => {\n            cluster.removeEventListener('click', selectPieceFunctions.selectPiece);\n            cluster.removeEventListener('click', turnExecution.executeTurn);\n            cluster.removeEventListener('click', selectors.deselect);\n\n            cluster.removeEventListener('keydown', KeyDown.handleKeyDownSelectPiece);\n            cluster.removeEventListener('keydown', KeyDown.handleKeyDownExecuteTurn);\n            cluster.removeEventListener('keydown', KeyDown.handleKeyDownDeselect);\n\n            cluster.classList.remove('highlighted');\n        })\n    },\n    addExecuteEventsToBoard() {\n        selectors.htmlBoard.forEach((cluster) => {\n            // Control first, if the Cluster match the possible Moves\n            const clusterNumber = +cluster.id.slice(-2);\n            if(selectors.checkCluster(clusterNumber)) {\n                cluster.addEventListener('click', turnExecution.executeTurn);\n                cluster.addEventListener('keydown', KeyDown.handleKeyDownExecuteTurn);\n                // Add a visual Mark to the Cluster\n                cluster.classList.add('highlighted');\n            } else {\n                cluster.addEventListener('click', selectors.deselect);\n                cluster.addEventListener('keydown', KeyDown.handleKeyDownDeselect);\n            };\n        });\n    },\n    checkCluster(clusterNumber) {\n        for(const move of selectingData.availableMoves) {\n            const [row, col] = move;\n            const field = row * 8 + col + 1;\n            if(field === clusterNumber) {\n                return true;\n            }\n        };\n\n        return false;\n    },\n    displayValidMoves() {\n        selectors.removeEventsFromBoard();\n        selectors.addExecuteEventsToBoard();\n    },\n    deselect() {\n        selectors.removeEventsFromBoard();\n        selectors.addEventsToBoard();\n    },\n};\n\nexport const selectingData = {\n    pieceId: '',\n    availableMoves: [],\n    get pieceName() {\n        return this.getPieceName(this.pieceId);\n    },\n    get piecePosition() {\n        return this.getPiecePosition(this.pieceId, coreData.board);\n    },\n    get pieceColor() {\n        return this.pieceId.includes('White') ? 'White' : 'Black';\n    },\n    get enemyColor() {\n        return this.pieceColor === 'White' ? 'Black' : 'White';\n    },\n    getPieceName(pieceId) {\n        const zeroIndex = pieceId.indexOf('0');\n        return pieceId.slice(0, zeroIndex);\n    },\n    getPiecePosition(pieceId, board) {\n        for (let i = 0; i < board.length; i++) {\n            for (let j = 0; j < board[i].length; j++) {\n                if (board[i][j] === pieceId) {\n                    return [i, j];\n                }\n            }\n        };\n        throw new Error(\"Piece not found on the board! - F:getPiecePosition\");\n    },\n};\n\nexport const selectPieceFunctions = {\n    selectPiece(event) {\n        const cluster = event.currentTarget;\n        selectingData.pieceId = cluster.children[0]?.id ?? 'No Piece in Cluster';\n        // console.log(selectingData.pieceId);\n        \n        // First: Check if the Field is valid to be selected from the Player\n        if(!selectPieceFunctions.checkValidTurn(selectingData.pieceId)) return PopUp.changeMsg('Choose your piece'); \n        // console.log('Valid Turn Success');\n\n        // Second: Calculate the possible moves & store them\n        if(!selectPieceFunctions.calculateValidMoves(selectingData.pieceName)) return PopUp.changeMsg('No available turns');\n\n        // console.log('Avaiable Moves', ...selectingData.availableMoves);\n\n        // Third: Show the User the available Moves\n        selectors.displayValidMoves();\n    },\n    checkValidTurn(pieceId) {\n        if(coreData.round % 2 !== 0) {\n            if(pieceId.includes('White')) return true;\n        };\n    \n        if(coreData.round % 2 === 0) {\n            if(pieceId.includes('Black')) return true;\n        };\n    \n        return false;\n    },\n    calculateValidMoves(pieceName) {\n        const { possibleMoves } = showPieceMovements[pieceName](selectingData.enemyColor, selectingData.piecePosition, \n            coreData.board, selectingData.pieceColor, selectingData.pieceId);\n        \n        // Filter the possibleMoves, if they get in conflict with a danger for the own king\n        selectingData.availableMoves = selectPieceFunctions.filterInvalidMoves(possibleMoves);\n\n        if (selectingData.availableMoves.length === 0) {\n            return false;\n        }\n\n        // console.log('Possible Moves: ', selectingData.availableMoves);\n\n        return true;\n    },\n    filterInvalidMoves(possibleMoves) {\n        const filteredMoves = [];\n\n        // Control by each possible move, if a Check is given \n        for(const move of possibleMoves) {\n            let newBoard = selectPieceFunctions.simulateMove\n            (move, selectingData.pieceId, selectingData.piecePosition, selectingData.pieceColor);\n\n            if(!gameStatus.isKingInCheck(`king01${selectingData.pieceColor}`, newBoard)) {\n                filteredMoves.push(move);\n            } // else console.log('Zug entfernt! ->' + move);\n        };\n\n        return filteredMoves;\n    },\n    // Simulate a board with the to executing Move\n    simulateMove(move, pieceId, piecePosition, pieceColor) {\n        const [targedRow, targedCol] = move;\n        const [currentRow, currentCol] = piecePosition;\n        let createdBoard = JSON.parse(JSON.stringify(coreData.board));\n\n        // If Rochade ist true, then apply it correctly\n        if(createdBoard[targedRow][targedCol].includes('king01' + pieceColor)) {\n           createdBoard = selectPieceFunctions.correctBoardForRochade(createdBoard, pieceId);\n           createdBoard[currentRow][currentCol] = '';\n        //    console.log(\"SimulatedBoard->\", createdBoard)\n           return createdBoard;\n        };\n\n        createdBoard[targedRow][targedCol] = pieceId;\n        createdBoard[currentRow][currentCol] = '';\n\n        // console.log(\"SimulatedBoard->\", createdBoard)\n        return createdBoard;\n    },\n    // Only necessary for the Board-Simulation\n    correctBoardForRochade(createdBoard, towerId) {\n        switch (towerId) {\n            case \"tower01Black\":\n                createdBoard[0][2] = 'king01Black';\n                createdBoard[0][4] = '';\n                createdBoard[0][3] = towerId;\n                return createdBoard;\n            case \"tower02Black\":\n                createdBoard[0][6] = 'king01Black';\n                createdBoard[0][4] = '';\n                createdBoard[0][5] = towerId;\n                return createdBoard;\n            case \"tower01White\":\n                createdBoard[7][2] = 'king01White';\n                createdBoard[7][4] = '';\n                createdBoard[7][3] = towerId;\n                return createdBoard;\n            case \"tower02White\":\n                createdBoard[7][6] = 'king01White';\n                createdBoard[7][4] = '';\n                createdBoard[7][5] = towerId;\n                return createdBoard;\n            default:\n                return console.log(\"Invalid towerId\");\n        };\n    },\n};\n                    \nexport const turnExecution = {\n    queenBlack: document.getElementById('queen01Black').cloneNode(true),\n    queenWhite: document.getElementById('queen01White').cloneNode(true),\n    executeTurn(event, target) {\n        // Get the involved Elements\n        let targetCluster = 0;\n        if(event === 'ai') {\n            targetCluster = document.getElementById(target)\n        } else {\n            targetCluster = event.currentTarget;\n        };\n        const pieceElement = document.getElementById(selectingData.pieceId);\n        const sourceCluster = pieceElement.parentElement;\n\n        // If the Turn contains not a rochade\n        if(!turnExecution.executeRochadeTurn(targetCluster, pieceElement, sourceCluster)) {\n\n            // Set the piece to the target position\n            turnExecution.executeNormalTurn(targetCluster, pieceElement, sourceCluster);\n        };\n\n        // If the Turn contains a promotion\n        turnExecution.executePromotion(targetCluster, pieceElement);\n\n        // Set the board back & update it\n        selectors.removeEventsFromBoard();\n        coreData.updateBoard();\n    },\n\n    executeNormalTurn(targetCluster, pieceElement, sourceCluster) {\n        sourceCluster.removeChild(pieceElement);\n        targetCluster.children[0]?.remove();\n        targetCluster.appendChild(pieceElement);\n    },\n    executeRochadeTurn(targetCluster, pieceElement, sourceCluster) {\n        // console.log(selectingData.pieceColor);\n        // console.log(targetCluster.children[0]?.id);\n        if(!targetCluster.children[0]?.id.includes('king01' + selectingData.pieceColor)) return false;\n\n        switch (pieceElement.id) {\n            case \"tower01Black\":\n                const kingElement01 = document.getElementById('king01Black');\n                kingElement01.remove();\n                document.getElementById('field03').appendChild(kingElement01);\n                sourceCluster.removeChild(pieceElement);\n                document.getElementById('field04').appendChild(pieceElement);\n                return true;\n            case \"tower02Black\":\n                const kingElement02 = document.getElementById('king01Black');\n                kingElement02.remove();\n                document.getElementById('field07').appendChild(kingElement02);\n                sourceCluster.removeChild(pieceElement);\n                document.getElementById('field06').appendChild(pieceElement);\n                return true;\n            case \"tower01White\":\n                const kingElement03 = document.getElementById('king01White');\n                kingElement03.remove();\n                document.getElementById('field59').appendChild(kingElement03);\n                sourceCluster.removeChild(pieceElement);\n                document.getElementById('field60').appendChild(pieceElement);\n                return true;\n            case \"tower02White\":\n                const kingElement04 = document.getElementById('king01White');\n                kingElement04.remove();\n                document.getElementById('field63').appendChild(kingElement04);\n                sourceCluster.removeChild(pieceElement);\n                document.getElementById('field62').appendChild(pieceElement);\n                return true;\n            default:\n                return false;\n        };\n    },\n    executePromotion(targetCluster, pieceElement) {\n        if(!pieceElement.id.includes('pawn')) return;\n\n        if(targetCluster.id.includes('01') || targetCluster.id.includes('02') ||\n        targetCluster.id.includes('03') || targetCluster.id.includes('04') ||\n        targetCluster.id.includes('05') || targetCluster.id.includes('06') ||\n        targetCluster.id.includes('07') || targetCluster.id.includes('08')) {\n            pieceElement.remove();\n            turnExecution.queenWhite.id = 'queen02White';\n            targetCluster.appendChild(turnExecution.queenWhite);\n        };\n\n        if(targetCluster.id.includes('64') || targetCluster.id.includes('63') ||\n        targetCluster.id.includes('62') || targetCluster.id.includes('61') ||\n        targetCluster.id.includes('60') || targetCluster.id.includes('59') ||\n        targetCluster.id.includes('58') || targetCluster.id.includes('57')) {\n            pieceElement.remove();\n            turnExecution.queenBlack.id = 'queen02Black';\n            targetCluster.appendChild(turnExecution.queenBlack);\n        };\n    },\n};\n\nconst KeyDown = {\n    handleKeyDownSelectPiece(event) {\n        if (event.key === 'Enter') {\n            selectPieceFunctions.selectPiece(event);\n        };\n    },\n    handleKeyDownExecuteTurn(event) {\n        if (event.key === 'Enter') {\n            turnExecution.executeTurn(event);\n        };\n    },\n    handleKeyDownDeselect(event) {\n        if (event.key === 'Enter') {\n            selectors.deselect();\n        };\n    },\n\n}","'use strict'\n\nimport { selectPieceFunctions, selectingData, turnExecution } from \"./gameLogic/pieceMove\";\nimport { coreData } from \"./gameStatus\";\n\nexport const aiTurn = {\n    playerColor: 'Black',\n    aiAvailableMoves: {\n        pawn01: [['pawn01Black'], []],\n        pawn02: [['pawn02Black'], []],\n        pawn03: [['pawn03Black'], []],\n        pawn04: [['pawn04Black'], []],\n        pawn05: [['pawn05Black'], []],\n        pawn06: [['pawn06Black'], []],\n        pawn07: [['pawn07Black'], []],\n        pawn08: [['pawn08Black'], []],\n        tower01: [['tower01Black'], []],\n        tower02: [['tower02Black'], []],\n        knight01: [['knight01Black'], []],\n        knight02: [['knight02Black'], []],\n        bishop01: [['bishop01Black'], []],\n        bishop02: [['bishop02Black'], []],\n        queen01: [['queen01Black'], []],\n        queen02: [['queen02Black'], []],\n        king01: [['king01Black'], []],\n    },\n    executeAiTurn() {\n\n        this.resetAiAvailableMoves();\n        \n        this.checkValidMoves();\n\n        let [ choosenPiece, choosenMove ] = this.evaluateMoves();\n\n        // console.log(choosenPiece, choosenMove);\n\n        this.placeTurn(choosenPiece, choosenMove);\n    },\n    checkValidMoves() {\n        // Detect all own pieces\n        for (let i = 0; i < coreData.board.length; i++) {\n            for (let j = 0; j < coreData.board[i].length; j++) {\n                if (coreData.board[i][j].includes(this.playerColor)) {\n                    // console.log(coreData.board[i][j])\n                    // Check if they have a available move\n                    selectingData.pieceId = coreData.board[i][j];\n                    if(selectPieceFunctions.calculateValidMoves(selectingData.pieceName)) {\n                        this.aiAvailableMoves[selectingData.pieceId.slice(0, -5)][1] = [...selectingData.availableMoves];\n                    };\n                };\n            };\n        };  \n    },\n    evaluateMoves() {\n        let bestMove = null;\n        let bestScore = 0;\n\n        for (const piece in this.aiAvailableMoves) {\n            const pieceData = this.aiAvailableMoves[piece];\n            const pieceName = pieceData[0][0];\n            const moves = pieceData[1];\n\n            for (const move of moves) {\n                // Evaluate the move\n                if(move.length === 0) continue;\n                const score = this.evaluateMove(move);\n    \n                // Save the best move\n                if (score > bestScore) {\n                    bestScore = score;\n                    // console.log(bestScore, 'Piece:', pieceName);\n                    bestMove = [ pieceName, move ];\n                };\n            };\n        };\n\n        return bestMove;\n    },\n    evaluateMove(move) {\n        const [ row, col ] = move;\n\n        const enemyPiece = coreData.board[row][col];\n\n        if(enemyPiece === '') return this.getFieldValue(row, col);\n\n        let value = this.getPieceValue(enemyPiece) + this.getFieldValue(row, col);\n\n        return value;\n    },\n    getPieceValue(enemyPiece) {\n        if(enemyPiece === 'king01Black') return 20;\n\n        enemyPiece = enemyPiece.slice(0, -7);\n        const value = {\n            pawn: 10,\n            knight: 30,\n            bishop: 30,\n            tower: 50,\n            queen: 100,\n            king: 1000,\n        };\n\n        return value[enemyPiece];\n    },\n    getFieldValue(row, col) {\n        const boardValue = [\n            [1, 2, 2, 2, 2, 2, 2, 1],\n            [2, 3, 4, 4, 4, 3, 3, 2],\n            [2, 4, 6, 7, 7, 6, 4, 2],\n            [2, 4, 7, 8, 8, 7, 4, 2],\n            [2, 4, 7, 8, 8, 7, 4, 2],\n            [2, 4, 6, 7, 7, 6, 4, 2],\n            [2, 3, 4, 4, 4, 4, 3, 2],\n            [1, 2, 2, 2, 2, 2, 2, 1]\n        ];\n\n        return boardValue[row][col];\n    },\n    placeTurn(piece, move) {\n        selectingData.pieceId = piece;\n\n        const fieldId = this.getFieldId(move);\n\n        // Visual sign for the user\n        const field = document.getElementById(fieldId);\n        field.classList.add('highlightedAi');\n\n        setTimeout(function() {\n            turnExecution.executeTurn('ai', fieldId);\n            field.classList.remove('highlightedAi');\n        }, 600);\n        \n    },\n    getFieldId(move) {\n        const [row, col] = move;\n        let fieldNumber = row * 8 + col + 1;\n        if (fieldNumber < 10) fieldNumber = `0` + fieldNumber;\n        return `field${fieldNumber}`;\n    },\n    resetAiAvailableMoves() {\n        this.aiAvailableMoves = {\n            pawn01: [['pawn01Black'], []],\n            pawn02: [['pawn02Black'], []],\n            pawn03: [['pawn03Black'], []],\n            pawn04: [['pawn04Black'], []],\n            pawn05: [['pawn05Black'], []],\n            pawn06: [['pawn06Black'], []],\n            pawn07: [['pawn07Black'], []],\n            pawn08: [['pawn08Black'], []],\n            tower01: [['tower01Black'], []],\n            tower02: [['tower02Black'], []],\n            knight01: [['knight01Black'], []],\n            knight02: [['knight02Black'], []],\n            bishop01: [['bishop01Black'], []],\n            bishop02: [['bishop02Black'], []],\n            queen01: [['queen01Black'], []],\n            queen02: [['queen02Black'], []],\n            king01: [['king01Black'], []],\n        };\n    },\n};","\"use strict\";\n\nimport { selectingData, selectPieceFunctions, selectors} from \"./gameLogic/pieceMove\";\nimport { showPieceMovements } from \"./gameLogic/pieces\";\nimport { aiTurn } from \"./ai\";\nimport { PopUp } from \"./popUp.js\";\n\nexport const coreData = {\n    round: 0,\n    White: {\n        check: false,\n        player01: 'Player01',\n    },\n    Black: {\n        check: false,\n        player02: 'AI',\n    },\n    board: [],\n    getPlayerName() {\n        this.White.player01 = document.getElementById('player01').value;\n        this.Black.player02 = document.getElementById('player02').value || 'AI';\n    },\n    // Update the Board Array depending on the board in the DOM\n    updateBoard() {\n        const htmlBoard = document.querySelectorAll('.fieldCluster');\n        this.board = [[], [], [], [], [], [], [], []];\n        let i = 0;\n        \n        // The Board Update\n        htmlBoard.forEach((boardCluster) => {\n    \n            // When a row is full, jump to the next\n            if (this.board[0 + i].length === 8) {\n                i++;\n            };\n    \n            this.board[0 + i].push(boardCluster.children[0]?.id ?? \"\");\n        });\n\n        coreData.countRounds();\n\n        // console.log(coreData);\n\n        if(gameStatus.checkGameStatus()) return gameStatus.runGameOver();\n\n        if(this.checkAiTurn()) return aiTurn.executeAiTurn();\n\n        selectors.addEventsToBoard();\n    },\n    countRounds() {\n        this.round += 1;\n    },\n    checkAiTurn() {\n        if ((this.Black.player02 === 'AI') && (this.round % 2 === 0)) return true;\n        return false;\n    },\n};\n\nexport const gameStatus = {\n    originalHtmlBoard: document.getElementById('board').cloneNode(true),\n    checkGameStatus() {\n        const playerKing = (coreData.round % 2 === 0) ? 'king01Black' : 'king01White';\n        const player = (coreData.round % 2 === 0) ? coreData.Black.player02 : coreData.White.player01;\n        const playerColor = (coreData.round % 2 === 0) ? 'Black' : 'White';\n        const enemyColor = (coreData.round % 2 === 0) ? 'White' : 'Black';\n        \n        if(this.isKingInCheck(playerKing, coreData.board)) {\n            coreData[playerColor].check = true;\n\n            PopUp.changeMsg(player + ' is in Check!')\n        } else {\n            coreData[enemyColor].check = false;\n            coreData[playerColor].check = false;\n        };\n        \n        if(this.checkMate(playerColor)) return true;\n\n        return false;\n    },\n    // Arguments 'king' & 'board' are always necessary\n    isKingInCheck(king, board) {\n        const dangerColor = king.includes('Black') ? 'White' : 'Black';   // Enemy Color\n        const pieceColor = (dangerColor === 'Black') ? 'White' : 'Black'; // Own Color\n        \n        // If one Move of the Enemy get the own King in danger\n        if(this.detectAllEnemies(king, board, dangerColor, pieceColor)) return true;\n\n        return false;\n    },\n    // Detect all Enemies in the Board\n    detectAllEnemies(king, board, dangerColor, pieceColor) {\n        for (let i = 0; i < board.length; i++) {\n            for (let j = 0; j < board[i].length; j++) {\n                if (board[i][j].includes(dangerColor)) {\n                    if(this.collectAllMoves(king, board, dangerColor, pieceColor, i, j)) return true;\n                };\n            };\n        };\n        return false;\n    },\n    // Collect all possible Moves from the Enemy\n    collectAllMoves(king, board, dangerColor, pieceColor, i, j) {\n        let dangerId = board[i][j];\n        let dangerName =  selectingData.getPieceName(dangerId);\n        let dangerPosition = [i, j];\n        let kingPosition = selectingData.getPiecePosition(king, board);\n\n        const { possibleMoves } = showPieceMovements[dangerName]\n        (pieceColor, dangerPosition, board, dangerColor, dangerId);\n        \n        if(this.controlMoveMatch(possibleMoves, kingPosition)) return true;\n        return false;\n    },\n    // Control if one Move match to the Position of the King\n    controlMoveMatch(possibleMoves, kingPosition) {\n        for (const move of possibleMoves) {\n            if (move[0] === kingPosition[0] && move[1] === kingPosition[1]) {\n                // console.log(\"Zug entfernt\");\n                return true;\n            };\n        };\n        return false;\n    },\n    checkMate(playerColor) {\n        // Detect all own pieces\n        for (let i = 0; i < coreData.board.length; i++) {\n            for (let j = 0; j < coreData.board[i].length; j++) {\n                if (coreData.board[i][j].includes(playerColor)) {\n                    // Check if they have a available Move\n                    selectingData.pieceId = coreData.board[i][j];\n                    if(selectPieceFunctions.calculateValidMoves(selectingData.pieceName)) {\n                        return false;\n                    };\n                };\n            };\n        };  \n        return true;\n    },\n    runGameOver() {\n        const winner = (coreData.round % 2 === 0) ? \n        coreData.White.player01 : coreData.Black.player02;\n\n        PopUp.changeMsg(winner + ' won the game! Congratulation!')\n\n        setTimeout(function() {\n            gameStatus.resetGame();\n        }, 5050);\n        \n    },\n    resetGame() {\n        coreData.round = 0;\n        // Reset the Board\n        document.getElementById('board').remove();\n\n        const newBoard = gameStatus.originalHtmlBoard.cloneNode(true); \n        newBoard.id = 'board'; \n        document.getElementById('boardInnerBorder').appendChild(newBoard);\n\n        coreData.updateBoard();\n    },\n};"],"names":["showPieceMovements","pawn","enemyColor","piecePosition","board","pieceColor","possibleMoves","push","moves","getPawnMoves","tower","pieceId","check","getTowerMoves","getRochadMoves","knight","getKnightMoves","bishop","getBishopMoves","queen","king","getKingMoves","direction","row","col","movePoints","includes","i","toString","coreData","forEach","rowIncrement","colIncrement","newRow","newCol","j","PopUp","popUp","document","getElementById","changeMsg","msg","this","innerText","showAndHide","classList","contains","add","setTimeout","remove","selectors","htmlBoard","querySelectorAll","addEventsToBoard","cluster","addEventListener","selectPieceFunctions","selectPiece","KeyDown","handleKeyDownSelectPiece","removeEventsFromBoard","removeEventListener","turnExecution","executeTurn","deselect","handleKeyDownExecuteTurn","handleKeyDownDeselect","addExecuteEventsToBoard","clusterNumber","id","slice","checkCluster","move","selectingData","availableMoves","displayValidMoves","pieceName","getPieceName","getPiecePosition","zeroIndex","indexOf","length","Error","event","currentTarget","children","checkValidTurn","calculateValidMoves","round","filterInvalidMoves","filteredMoves","newBoard","simulateMove","gameStatus","isKingInCheck","targedRow","targedCol","currentRow","currentCol","createdBoard","JSON","parse","stringify","correctBoardForRochade","towerId","console","log","queenBlack","cloneNode","queenWhite","target","targetCluster","pieceElement","sourceCluster","parentElement","executeRochadeTurn","executeNormalTurn","executePromotion","updateBoard","removeChild","appendChild","kingElement01","kingElement02","kingElement03","kingElement04","key","aiTurn","playerColor","aiAvailableMoves","pawn01","pawn02","pawn03","pawn04","pawn05","pawn06","pawn07","pawn08","tower01","tower02","knight01","knight02","bishop01","bishop02","queen01","queen02","king01","executeAiTurn","resetAiAvailableMoves","checkValidMoves","choosenPiece","choosenMove","evaluateMoves","placeTurn","bestMove","bestScore","piece","pieceData","score","evaluateMove","enemyPiece","getFieldValue","getPieceValue","fieldId","getFieldId","field","fieldNumber","White","player01","Black","player02","getPlayerName","value","boardCluster","countRounds","checkGameStatus","runGameOver","checkAiTurn","originalHtmlBoard","playerKing","player","checkMate","dangerColor","detectAllEnemies","collectAllMoves","dangerId","dangerName","dangerPosition","kingPosition","controlMoveMatch","winner","resetGame"],"sourceRoot":""}